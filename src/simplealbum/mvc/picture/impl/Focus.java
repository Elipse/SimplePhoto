/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simplealbum.mvc.picture.impl;

import java.awt.EventQueue;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import simplealbum.mvc.photo.RunThread;

/**
 *
 * @author elialva
 */
public class Focus extends javax.swing.JFrame {

    private volatile String text;
    private MyThread myThread;
    private volatile DocumentEvent event;

    /**
     * Creates new form Focus
     */
    public Focus() {
        initComponents();
        myThread = new MyThread();

        MyListener myListener = new MyListener();
        jTextField1.getDocument().addDocumentListener(myListener);
        JButton table = new JButton();
        table.addChangeListener(null);

        myThread.addPropertyChangeListener(myListener);
    }

    private void documentUpdate(DocumentEvent e) {
        myThread.resume(e);
    }

    private void propertyChange(PropertyChangeEvent e) {
        System.out.println("AWT verifying success: " + myThread.getWatchword().hashCode() + " -vs- " + myThread.getSynch().hashCode());
        if (myThread.isSynch()) {
            System.out.println("AWT painting the list");
            System.out.println("AWT making it sleep");
            myThread.suspend();
        }
    }

    public String getText() {
        return text;
    }

    public DocumentEvent getEvent() {
        return event;
    }

    class MyThread extends RunThread {

//        private volatile String text;
//        private volatile DocumentEvent event;
        @Override
        public void doInBackgroud() {
            try {
                DocumentEvent event = (DocumentEvent) watchword;
                String text = event.getDocument().getText(0, event.getDocument().getLength());
                System.out.println("Thread processing... " + text);
                Thread.sleep(1000);
                final List list = new ArrayList();

                if (isSynch()) {
                    try {
                        System.out.println("Thread being successful...");
                        Thread.sleep(1000);
                        EventQueue.invokeAndWait(new Runnable() {

                            @Override
                            public void run() {
                                //TODO hacer que firePropertyChange se ejecute en AWT en RunThread ?!
                                propertyChangeSupport.firePropertyChange("post", null, list);
                            }
                        });
                    } catch (InterruptedException | InvocationTargetException ex) {
                        Logger.getLogger(Focus.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    System.out.println("Thread trying again...");
                }
            } catch (InterruptedException | BadLocationException ex) {
                Logger.getLogger(Focus.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(241, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(269, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Focus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Focus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Focus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Focus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Focus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private class MyListener implements DocumentListener, PropertyChangeListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            documentUpdate(e);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            documentUpdate(e);
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            documentUpdate(e);
        }

        public void documentUpdate(DocumentEvent e) {
            Focus.this.documentUpdate(e);
        }

        @Override
        public void propertyChange(PropertyChangeEvent e) {
            Focus.this.propertyChange(e);
        }
    }
}
